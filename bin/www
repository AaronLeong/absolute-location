#!/usr/bin/env node

//amqp://admin:admin@140.119.176.124
//demo.EXCHANGE1

Array.prototype.clean = function(deleteValue) {
  for (var i = 0; i < this.length; i++) {
    if (this[i] == deleteValue) {
      this.splice(i, 1);
      i--;
    }
  }
  return this;
};

var debug = require('debug')('expressapp');
var app = require('../app');
var scanner = require('../lib/scanner');

app.set('port', process.env.PORT || 9000);

var server = require('http').createServer(app);
server.listen(app.get('port'), function() {
  console.log("Express server listening on port " + app.get('port'));
});

var io = require('socket.io')(server);
var updatePositionCallback = null;
io.on('connection', function (socket) {
  socket.emit('update', { hello: 'world' });

  socket.on('updatePosition', function(position) {
    if (updatePositionCallback) { updatePositionCallback(position); }
  });
});

require('amqplib/callback_api')
.connect('amqp://admin:admin@140.119.163.199', function(err, conn) {
  if (err != null) bail(err);
  conn.createChannel(function(err, ch) {
    ch.assertExchange('demo.EXCHANGE1', 'fanout', {durable: false}, function(err, ex) {
      console.log('amqp connected');

      updatePositionCallback = function(position) {
        console.log('update position');
        ch.publish('demo.EXCHANGE1', '', new Buffer(JSON.stringify({
          Position: position
        })));
      };
    })
  });
});

/*
scanner.events.on('updateBeacons', function(beacons) {
  io.sockets.emit('updateBeacons', beacons);
});

scanner.init(500);
*/

// LE
var cmdArguments = ['-c', 'sudo btmon'];
var rl = require('readline');

var lesource = require('child_process').spawn('sh', cmdArguments);
linereader = rl.createInterface(lesource.stdout, lesource.stdin);

var record_toggle = false,
    record_entity = {},
    record_list = [];

linereader.on('line', function (line) {
  var sep = line.split(' ').clean('');

  if (sep[0] == 'LE' && sep[1] == 'Advertising' && sep[2] == 'Report' && !record_toggle) {
    record_entity = {recieve_at: Date.now()};
    record_toggle = true;
  } else if (record_toggle) {
    if (sep[0] == 'Address:') {
      record_entity.address = sep[1];
    } else if (sep[0] == 'RSSI:') {
      record_entity.rssi = sep[1];
      record_list.push(record_entity);

      console.log(record_entity);
      record_toggle = false;
    }
  }
/*
  for (var i = 0; i < sep.length; i++) {
    console.log(sep[i]);
  }
  console.log('===');
*/
});

lesource.stderr.on('data', function (data) {
  console.log('le-err:' + data);
});

lesource.on('close', function (code) {
  console.log('le process exited with code ' + code);
});
